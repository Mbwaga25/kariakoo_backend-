import graphene
from .models import Store, StoreProduct
from products.models import Product 
from .types import StoreType, StoreProductType
from graphql_jwt.decorators import staff_member_required 

class StoreInput(graphene.InputObjectType):
    id = graphene.ID()
    name = graphene.String(required=True)
    slug = graphene.String()
    description = graphene.String()
    email = graphene.String()
    phone_number = graphene.String()
    address_line1 = graphene.String()
    city = graphene.String()
    state_province = graphene.String()
    postal_code = graphene.String()
    country = graphene.String()
    latitude = graphene.Float()
    longitude = graphene.Float()
    is_active = graphene.Boolean()
    store_type = graphene.String() 

class CreateStoreMutation(graphene.Mutation):
    class Arguments:
        input = StoreInput(required=True)

    store = graphene.Field(StoreType)
    success = graphene.Boolean()
    errors = graphene.List(graphene.String)

    @classmethod
    @staff_member_required # Only staff/admins can create stores
    def mutate(cls, root, info, input):
        try:
            store = Store.objects.create(
                name=input.name,
                description=input.description,
                email=input.email,
                phone_number=input.phone_number,
                address_line1=input.address_line1,
                city=input.city,
                state_province=input.state_province,
                postal_code=input.postal_code,
                country=input.country,
                latitude=input.latitude,
                longitude=input.longitude,
                is_active=input.is_active if input.is_active is not None else True,
                store_type=input.store_type or Store.STORE_TYPE_RETAIL
            )
            # Slug is auto-generated by model's save method if blank
            return cls(store=store, success=True)
        except Exception as e:
            return cls(store=None, success=False, errors=[str(e)])

class UpdateStoreMutation(graphene.Mutation):
    class Arguments:
        id = graphene.ID(required=True) # ID of the store to update
        input = StoreInput(required=True)

    store = graphene.Field(StoreType)
    success = graphene.Boolean()
    errors = graphene.List(graphene.String)

    @classmethod
    @staff_member_required # Or a permission like 'can_update_own_store'
    def mutate(cls, root, info, id, input):
        try:
            store = Store.objects.get(pk=id)
            # TODO: Add permission check: does info.context.user own this store or is superadmin?

            for field, value in input.items():
                if value is not None and hasattr(store, field): # Check if field exists and value provided
                    setattr(store, field, value)
            store.save() # This will also re-trigger slug generation if name changed and slug was blank
            return cls(store=store, success=True)
        except Store.DoesNotExist:
            return cls(store=None, success=False, errors=["Store not found."])
        except Exception as e:
            return cls(store=None, success=False, errors=[str(e)])


class StoreProductInput(graphene.InputObjectType):
    store_id = graphene.ID(required=True)
    product_id = graphene.ID(required=True)
    price = graphene.Decimal(required=True)
    stock = graphene.Int(required=True)
    is_available = graphene.Boolean(default_value=True)
    wholesale_price = graphene.Decimal()
    wholesale_minimum_quantity = graphene.Int()

class AddOrUpdateStoreProductMutation(graphene.Mutation):
    class Arguments:
        input = StoreProductInput(required=True)
        # To update by StoreProduct ID directly (PUT /store-products/:id)
        # store_product_id = graphene.ID(required=False)

    store_product = graphene.Field(StoreProductType)
    success = graphene.Boolean()
    errors = graphene.List(graphene.String)

    @classmethod
    @staff_member_required # Or 'store_manager_permission'
    def mutate(cls, root, info, input):
        # TODO: Add permission check: does user manage this store_id?
        try:
            store = Store.objects.get(pk=input.store_id)
            product = Product.objects.get(pk=input.product_id)

            store_product, created = StoreProduct.objects.update_or_create(
                store=store,
                product=product,
                defaults={
                    'price': input.price,
                    'stock': input.stock,
                    'is_available': input.is_available,
                    'wholesale_price': input.wholesale_price,
                    'wholesale_minimum_quantity': input.wholesale_minimum_quantity
                }
            )
            return cls(store_product=store_product, success=True)
        except Store.DoesNotExist:
            return cls(success=False, errors=["Store not found."])
        except Product.DoesNotExist:
            return cls(success=False, errors=["Global product not found."])
        except Exception as e:
            return cls(success=False, errors=[str(e)])

# Other Admin Mutations (Conceptual - would require more complex user role/permission logic)
# POST /admin/users/assign-store -> assignManagerToStore(userId, storeId)

class StoreManagementMutations(graphene.ObjectType):
    create_store = CreateStoreMutation.Field()
    update_store = UpdateStoreMutation.Field()
    add_or_update_store_product = AddOrUpdateStoreProductMutation.Field()
    # ... other store management mutations
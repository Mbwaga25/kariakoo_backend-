# your_app/graphql/handlers/brand_handler.py
from .base_handler import BaseHandler
from ..helpers import handle_image_import # Adjusted path
from ...models import Brand # Adjusted path to app's models
from django.utils.text import slugify

class BrandHandler(BaseHandler):
    model = Brand
    required_fields = ['name']
    lookup_field = 'name'

    def handle(self, data):
        errors = []
        if not self.validate_data(data, errors):
            return {'instance': None, 'status': 'error', 'errors': errors}

        lookup_params, param_errors = self._get_lookup_params(data)
        if param_errors:
            return {'instance': None, 'status': 'error', 'errors': param_errors}

        # Prepare defaults for creation or update
        brand_name = lookup_params.get(self.lookup_field) # or data.get(self.lookup_field)
        defaults = {
            'description': data.get('description', ''),
            # slug is auto-generated by model's save method, so no need to set here unless overriding
        }

        logo_data = data.get('logo')
        if logo_data:
            logo_file = handle_image_import(logo_data, f"brand_{slugify(brand_name if brand_name else 'unknown')}")
            if logo_file:
                defaults['logo'] = logo_file
            else:
                errors.append(f"Failed to process logo for brand '{brand_name}'.")

        instance = None
        status = 'skipped'

        try:
            if self.update_existing:
                instance, created = self.model.objects.update_or_create(
                    defaults=defaults,
                    **lookup_params
                )
                status = 'created' if created else 'updated'
            else:
                try:
                    instance = self.model.objects.get(**lookup_params)
                    # Found, but not updating. status remains 'skipped' or could be 'exists'
                except self.model.DoesNotExist:
                    if self.create_related: # This flag means "can we create this brand?"
                        # Combine lookup_params and defaults for creation
                        create_data = {**defaults, **lookup_params}
                        instance = self.model.objects.create(**create_data)
                        status = 'created'
                    else:
                        errors.append(f"{self.model.__name__} with {lookup_params} not found, and creation is disallowed.")
                        status = 'error'
                except self.model.MultipleObjectsReturned:
                    errors.append(f"Multiple {self.model.__name__} instances found for {lookup_params}.")
                    status = 'error'

        except Exception as e:
            errors.append(f"Error processing {self.model.__name__} with {lookup_params}: {str(e)}")
            status = 'error'
            if instance: # If error happened after instance was somehow set (e.g. during update)
                instance = None


        return {'instance': instance, 'status': status, 'errors': errors}